// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

/*
Package test is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	Frame
	MsgEcho
	MsgPing
*/
package test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Frame struct {
	// Types that are valid to be assigned to Msg:
	//	*Frame_Echo
	//	*Frame_Ping
	Msg isFrame_Msg `protobuf_oneof:"Msg"`
}

func (m *Frame) Reset()                    { *m = Frame{} }
func (m *Frame) String() string            { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()               {}
func (*Frame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isFrame_Msg interface {
	isFrame_Msg()
}

type Frame_Echo struct {
	Echo *MsgEcho `protobuf:"bytes,1,opt,name=Echo,oneof"`
}
type Frame_Ping struct {
	Ping *MsgPing `protobuf:"bytes,2,opt,name=ping,oneof"`
}

func (*Frame_Echo) isFrame_Msg() {}
func (*Frame_Ping) isFrame_Msg() {}

func (m *Frame) GetMsg() isFrame_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Frame) GetEcho() *MsgEcho {
	if x, ok := m.GetMsg().(*Frame_Echo); ok {
		return x.Echo
	}
	return nil
}

func (m *Frame) GetPing() *MsgPing {
	if x, ok := m.GetMsg().(*Frame_Ping); ok {
		return x.Ping
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Frame) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Frame_OneofMarshaler, _Frame_OneofUnmarshaler, _Frame_OneofSizer, []interface{}{
		(*Frame_Echo)(nil),
		(*Frame_Ping)(nil),
	}
}

func _Frame_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Frame)
	// Msg
	switch x := m.Msg.(type) {
	case *Frame_Echo:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Echo); err != nil {
			return err
		}
	case *Frame_Ping:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Frame.Msg has unexpected type %T", x)
	}
	return nil
}

func _Frame_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Frame)
	switch tag {
	case 1: // Msg.Echo
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MsgEcho)
		err := b.DecodeMessage(msg)
		m.Msg = &Frame_Echo{msg}
		return true, err
	case 2: // Msg.ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MsgPing)
		err := b.DecodeMessage(msg)
		m.Msg = &Frame_Ping{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Frame_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Frame)
	// Msg
	switch x := m.Msg.(type) {
	case *Frame_Echo:
		s := proto.Size(x.Echo)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Frame_Ping:
		s := proto.Size(x.Ping)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MsgEcho struct {
	Data string `protobuf:"bytes,1,opt,name=Data" json:"Data,omitempty"`
}

func (m *MsgEcho) Reset()                    { *m = MsgEcho{} }
func (m *MsgEcho) String() string            { return proto.CompactTextString(m) }
func (*MsgEcho) ProtoMessage()               {}
func (*MsgEcho) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MsgEcho) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type MsgPing struct {
}

func (m *MsgPing) Reset()                    { *m = MsgPing{} }
func (m *MsgPing) String() string            { return proto.CompactTextString(m) }
func (*MsgPing) ProtoMessage()               {}
func (*MsgPing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Frame)(nil), "test.Frame")
	proto.RegisterType((*MsgEcho)(nil), "test.MsgEcho")
	proto.RegisterType((*MsgPing)(nil), "test.MsgPing")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestService service

type TestServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (TestService_StreamClient, error)
	Echo(ctx context.Context, in *MsgEcho, opts ...grpc.CallOption) (*MsgEcho, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (TestService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TestService_serviceDesc.Streams[0], c.cc, "/test.TestService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceStreamClient{stream}
	return x, nil
}

type TestService_StreamClient interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ClientStream
}

type testServiceStreamClient struct {
	grpc.ClientStream
}

func (x *testServiceStreamClient) Send(m *Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceStreamClient) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) Echo(ctx context.Context, in *MsgEcho, opts ...grpc.CallOption) (*MsgEcho, error) {
	out := new(MsgEcho)
	err := grpc.Invoke(ctx, "/test.TestService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TestService service

type TestServiceServer interface {
	Stream(TestService_StreamServer) error
	Echo(context.Context, *MsgEcho) (*MsgEcho, error)
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).Stream(&testServiceStreamServer{stream})
}

type TestService_StreamServer interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ServerStream
}

type testServiceStreamServer struct {
	grpc.ServerStream
}

func (x *testServiceStreamServer) Send(m *Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceStreamServer) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEcho)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.TestService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Echo(ctx, req.(*MsgEcho))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _TestService_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _TestService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x22, 0xb8, 0x58, 0xdd, 0x8a,
	0x12, 0x73, 0x53, 0x85, 0x94, 0xb9, 0x58, 0x5c, 0x93, 0x33, 0xf2, 0x25, 0x18, 0x15, 0x18, 0x35,
	0xb8, 0x8d, 0x78, 0xf5, 0xc0, 0x2a, 0x7d, 0x8b, 0xd3, 0x41, 0x82, 0x1e, 0x0c, 0x41, 0x60, 0x49,
	0x90, 0xa2, 0x82, 0xcc, 0xbc, 0x74, 0x09, 0x26, 0x34, 0x45, 0x01, 0x99, 0x79, 0xe9, 0x20, 0x45,
	0x20, 0x49, 0x27, 0x56, 0x2e, 0x66, 0xdf, 0xe2, 0x74, 0x25, 0x59, 0x2e, 0x76, 0xa8, 0x76, 0x21,
	0x21, 0x2e, 0x16, 0x97, 0xc4, 0x92, 0x44, 0xb0, 0xd9, 0x9c, 0x41, 0x60, 0xb6, 0x12, 0x27, 0x58,
	0x1a, 0xa4, 0xd1, 0x28, 0x9a, 0x8b, 0x3b, 0x24, 0xb5, 0xb8, 0x24, 0x38, 0xb5, 0xa8, 0x2c, 0x33,
	0x39, 0x55, 0x48, 0x8d, 0x8b, 0x2d, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0x57, 0x88, 0x1b, 0x62, 0x01,
	0xd8, 0x81, 0x52, 0xc8, 0x1c, 0x0d, 0x46, 0x03, 0x46, 0x21, 0x15, 0x88, 0x8b, 0x85, 0x50, 0xdd,
	0x2a, 0x85, 0xca, 0x4d, 0x62, 0x03, 0xfb, 0xd6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x10, 0x29,
	0x11, 0xd2, 0xfb, 0x00, 0x00, 0x00,
}
