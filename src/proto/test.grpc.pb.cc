// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto

#include "test.pb.h"
#include "test.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace test {

static const char* TestService_method_names[] = {
  "/test.TestService/Stream",
  "/test.TestService/Stream2",
  "/test.TestService/Echo",
};

std::unique_ptr< TestService::Stub> TestService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TestService::Stub> stub(new TestService::Stub(channel, options));
  return stub;
}

TestService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Stream_(TestService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Stream2_(TestService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Echo_(TestService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::test::Frame, ::test::Frame>* TestService::Stub::StreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::test::Frame, ::test::Frame>::Create(channel_.get(), rpcmethod_Stream_, context);
}

void TestService::Stub::async::Stream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::test::Frame,::test::Frame>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::test::Frame,::test::Frame>::Create(stub_->channel_.get(), stub_->rpcmethod_Stream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::test::Frame, ::test::Frame>* TestService::Stub::AsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::test::Frame, ::test::Frame>::Create(channel_.get(), cq, rpcmethod_Stream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::test::Frame, ::test::Frame>* TestService::Stub::PrepareAsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::test::Frame, ::test::Frame>::Create(channel_.get(), cq, rpcmethod_Stream_, context, false, nullptr);
}

::grpc::ClientReaderWriter< ::test::Frame, ::test::Frame>* TestService::Stub::Stream2Raw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::test::Frame, ::test::Frame>::Create(channel_.get(), rpcmethod_Stream2_, context);
}

void TestService::Stub::async::Stream2(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::test::Frame,::test::Frame>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::test::Frame,::test::Frame>::Create(stub_->channel_.get(), stub_->rpcmethod_Stream2_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::test::Frame, ::test::Frame>* TestService::Stub::AsyncStream2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::test::Frame, ::test::Frame>::Create(channel_.get(), cq, rpcmethod_Stream2_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::test::Frame, ::test::Frame>* TestService::Stub::PrepareAsyncStream2Raw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::test::Frame, ::test::Frame>::Create(channel_.get(), cq, rpcmethod_Stream2_, context, false, nullptr);
}

::grpc::Status TestService::Stub::Echo(::grpc::ClientContext* context, const ::test::MsgEcho& request, ::test::MsgEcho* response) {
  return ::grpc::internal::BlockingUnaryCall< ::test::MsgEcho, ::test::MsgEcho, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Echo_, context, request, response);
}

void TestService::Stub::async::Echo(::grpc::ClientContext* context, const ::test::MsgEcho* request, ::test::MsgEcho* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::test::MsgEcho, ::test::MsgEcho, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Echo_, context, request, response, std::move(f));
}

void TestService::Stub::async::Echo(::grpc::ClientContext* context, const ::test::MsgEcho* request, ::test::MsgEcho* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Echo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::test::MsgEcho>* TestService::Stub::PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::test::MsgEcho& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::test::MsgEcho, ::test::MsgEcho, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Echo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::test::MsgEcho>* TestService::Stub::AsyncEchoRaw(::grpc::ClientContext* context, const ::test::MsgEcho& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEchoRaw(context, request, cq);
  result->StartCall();
  return result;
}

TestService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TestService::Service, ::test::Frame, ::test::Frame>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::test::Frame,
             ::test::Frame>* stream) {
               return service->Stream(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TestService::Service, ::test::Frame, ::test::Frame>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::test::Frame,
             ::test::Frame>* stream) {
               return service->Stream2(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::test::MsgEcho, ::test::MsgEcho, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TestService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::test::MsgEcho* req,
             ::test::MsgEcho* resp) {
               return service->Echo(ctx, req, resp);
             }, this)));
}

TestService::Service::~Service() {
}

::grpc::Status TestService::Service::Stream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::test::Frame, ::test::Frame>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::Stream2(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::test::Frame, ::test::Frame>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::Echo(::grpc::ServerContext* context, const ::test::MsgEcho* request, ::test::MsgEcho* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace test

