// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_test_2eproto_metadata_getter(int index);
namespace test {
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class MsgEcho;
struct MsgEchoDefaultTypeInternal;
extern MsgEchoDefaultTypeInternal _MsgEcho_default_instance_;
class MsgPing;
struct MsgPingDefaultTypeInternal;
extern MsgPingDefaultTypeInternal _MsgPing_default_instance_;
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::Frame* Arena::CreateMaybeMessage<::test::Frame>(Arena*);
template<> ::test::MsgEcho* Arena::CreateMaybeMessage<::test::MsgEcho>(Arena*);
template<> ::test::MsgPing* Arena::CreateMaybeMessage<::test::MsgPing>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {

// ===================================================================

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  virtual ~Frame();
  explicit constexpr Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  enum MsgCase {
    kEcho = 1,
    kPing = 2,
    MSG_NOT_SET = 0,
  };

  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_test_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEchoFieldNumber = 1,
    kPingFieldNumber = 2,
  };
  // .test.MsgEcho Echo = 1;
  bool has_echo() const;
  private:
  bool _internal_has_echo() const;
  public:
  void clear_echo();
  const ::test::MsgEcho& echo() const;
  ::test::MsgEcho* release_echo();
  ::test::MsgEcho* mutable_echo();
  void set_allocated_echo(::test::MsgEcho* echo);
  private:
  const ::test::MsgEcho& _internal_echo() const;
  ::test::MsgEcho* _internal_mutable_echo();
  public:
  void unsafe_arena_set_allocated_echo(
      ::test::MsgEcho* echo);
  ::test::MsgEcho* unsafe_arena_release_echo();

  // .test.MsgPing ping = 2;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::test::MsgPing& ping() const;
  ::test::MsgPing* release_ping();
  ::test::MsgPing* mutable_ping();
  void set_allocated_ping(::test::MsgPing* ping);
  private:
  const ::test::MsgPing& _internal_ping() const;
  ::test::MsgPing* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::test::MsgPing* ping);
  ::test::MsgPing* unsafe_arena_release_ping();

  void clear_Msg();
  MsgCase Msg_case() const;
  // @@protoc_insertion_point(class_scope:test.Frame)
 private:
  class _Internal;
  void set_has_echo();
  void set_has_ping();

  inline bool has_Msg() const;
  inline void clear_has_Msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgUnion {
    constexpr MsgUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::test::MsgEcho* echo_;
    ::test::MsgPing* ping_;
  } Msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class MsgEcho PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.MsgEcho) */ {
 public:
  inline MsgEcho() : MsgEcho(nullptr) {}
  virtual ~MsgEcho();
  explicit constexpr MsgEcho(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgEcho(const MsgEcho& from);
  MsgEcho(MsgEcho&& from) noexcept
    : MsgEcho() {
    *this = ::std::move(from);
  }

  inline MsgEcho& operator=(const MsgEcho& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgEcho& operator=(MsgEcho&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgEcho& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgEcho* internal_default_instance() {
    return reinterpret_cast<const MsgEcho*>(
               &_MsgEcho_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgEcho& a, MsgEcho& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgEcho* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgEcho* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgEcho* New() const final {
    return CreateMaybeMessage<MsgEcho>(nullptr);
  }

  MsgEcho* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgEcho>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgEcho& from);
  void MergeFrom(const MsgEcho& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgEcho* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.MsgEcho";
  }
  protected:
  explicit MsgEcho(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_test_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // string Data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:test.MsgEcho)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// -------------------------------------------------------------------

class MsgPing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.MsgPing) */ {
 public:
  inline MsgPing() : MsgPing(nullptr) {}
  virtual ~MsgPing();
  explicit constexpr MsgPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgPing(const MsgPing& from);
  MsgPing(MsgPing&& from) noexcept
    : MsgPing() {
    *this = ::std::move(from);
  }

  inline MsgPing& operator=(const MsgPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPing& operator=(MsgPing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MsgPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgPing* internal_default_instance() {
    return reinterpret_cast<const MsgPing*>(
               &_MsgPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgPing& a, MsgPing& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgPing* New() const final {
    return CreateMaybeMessage<MsgPing>(nullptr);
  }

  MsgPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgPing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgPing& from);
  void MergeFrom(const MsgPing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.MsgPing";
  }
  protected:
  explicit MsgPing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_test_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:test.MsgPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Frame

// .test.MsgEcho Echo = 1;
inline bool Frame::_internal_has_echo() const {
  return Msg_case() == kEcho;
}
inline bool Frame::has_echo() const {
  return _internal_has_echo();
}
inline void Frame::set_has_echo() {
  _oneof_case_[0] = kEcho;
}
inline void Frame::clear_echo() {
  if (_internal_has_echo()) {
    if (GetArena() == nullptr) {
      delete Msg_.echo_;
    }
    clear_has_Msg();
  }
}
inline ::test::MsgEcho* Frame::release_echo() {
  // @@protoc_insertion_point(field_release:test.Frame.Echo)
  if (_internal_has_echo()) {
    clear_has_Msg();
      ::test::MsgEcho* temp = Msg_.echo_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Msg_.echo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::test::MsgEcho& Frame::_internal_echo() const {
  return _internal_has_echo()
      ? *Msg_.echo_
      : reinterpret_cast< ::test::MsgEcho&>(::test::_MsgEcho_default_instance_);
}
inline const ::test::MsgEcho& Frame::echo() const {
  // @@protoc_insertion_point(field_get:test.Frame.Echo)
  return _internal_echo();
}
inline ::test::MsgEcho* Frame::unsafe_arena_release_echo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:test.Frame.Echo)
  if (_internal_has_echo()) {
    clear_has_Msg();
    ::test::MsgEcho* temp = Msg_.echo_;
    Msg_.echo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Frame::unsafe_arena_set_allocated_echo(::test::MsgEcho* echo) {
  clear_Msg();
  if (echo) {
    set_has_echo();
    Msg_.echo_ = echo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.Frame.Echo)
}
inline ::test::MsgEcho* Frame::_internal_mutable_echo() {
  if (!_internal_has_echo()) {
    clear_Msg();
    set_has_echo();
    Msg_.echo_ = CreateMaybeMessage< ::test::MsgEcho >(GetArena());
  }
  return Msg_.echo_;
}
inline ::test::MsgEcho* Frame::mutable_echo() {
  // @@protoc_insertion_point(field_mutable:test.Frame.Echo)
  return _internal_mutable_echo();
}

// .test.MsgPing ping = 2;
inline bool Frame::_internal_has_ping() const {
  return Msg_case() == kPing;
}
inline bool Frame::has_ping() const {
  return _internal_has_ping();
}
inline void Frame::set_has_ping() {
  _oneof_case_[0] = kPing;
}
inline void Frame::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArena() == nullptr) {
      delete Msg_.ping_;
    }
    clear_has_Msg();
  }
}
inline ::test::MsgPing* Frame::release_ping() {
  // @@protoc_insertion_point(field_release:test.Frame.ping)
  if (_internal_has_ping()) {
    clear_has_Msg();
      ::test::MsgPing* temp = Msg_.ping_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Msg_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::test::MsgPing& Frame::_internal_ping() const {
  return _internal_has_ping()
      ? *Msg_.ping_
      : reinterpret_cast< ::test::MsgPing&>(::test::_MsgPing_default_instance_);
}
inline const ::test::MsgPing& Frame::ping() const {
  // @@protoc_insertion_point(field_get:test.Frame.ping)
  return _internal_ping();
}
inline ::test::MsgPing* Frame::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:test.Frame.ping)
  if (_internal_has_ping()) {
    clear_has_Msg();
    ::test::MsgPing* temp = Msg_.ping_;
    Msg_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Frame::unsafe_arena_set_allocated_ping(::test::MsgPing* ping) {
  clear_Msg();
  if (ping) {
    set_has_ping();
    Msg_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.Frame.ping)
}
inline ::test::MsgPing* Frame::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_Msg();
    set_has_ping();
    Msg_.ping_ = CreateMaybeMessage< ::test::MsgPing >(GetArena());
  }
  return Msg_.ping_;
}
inline ::test::MsgPing* Frame::mutable_ping() {
  // @@protoc_insertion_point(field_mutable:test.Frame.ping)
  return _internal_mutable_ping();
}

inline bool Frame::has_Msg() const {
  return Msg_case() != MSG_NOT_SET;
}
inline void Frame::clear_has_Msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline Frame::MsgCase Frame::Msg_case() const {
  return Frame::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MsgEcho

// string Data = 1;
inline void MsgEcho::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& MsgEcho::data() const {
  // @@protoc_insertion_point(field_get:test.MsgEcho.Data)
  return _internal_data();
}
inline void MsgEcho::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:test.MsgEcho.Data)
}
inline std::string* MsgEcho::mutable_data() {
  // @@protoc_insertion_point(field_mutable:test.MsgEcho.Data)
  return _internal_mutable_data();
}
inline const std::string& MsgEcho::_internal_data() const {
  return data_.Get();
}
inline void MsgEcho::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MsgEcho::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:test.MsgEcho.Data)
}
inline void MsgEcho::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:test.MsgEcho.Data)
}
inline void MsgEcho::set_data(const char* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:test.MsgEcho.Data)
}
inline std::string* MsgEcho::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MsgEcho::release_data() {
  // @@protoc_insertion_point(field_release:test.MsgEcho.Data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MsgEcho::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:test.MsgEcho.Data)
}

// -------------------------------------------------------------------

// MsgPing

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
